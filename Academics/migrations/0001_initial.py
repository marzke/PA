# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2019-10-28 22:56
from __future__ import unicode_literals

import Academics.fields
import Academics.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicGroupParent',
            fields=[
                ('deptID', models.CharField(db_column=b'DEPTID', max_length=20)),
                ('deptName', models.CharField(db_column=b'DEPT_NAME', max_length=30)),
                ('college_deptid', models.CharField(db_column=b'COLLEGE_DEPTID', max_length=4)),
                ('college_name', models.CharField(db_column=b'COLLEGE_NAME', max_length=100)),
                ('acad_group', models.CharField(db_column=b'ACAD_GROUP', max_length=3, primary_key=True, serialize=False)),
                ('college_nickname', models.CharField(db_column=b'COLLEGE_NICKNAME', max_length=4)),
            ],
            options={
                'db_table': 'COLLEGE_VW',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AcademicOrganizationParent',
            fields=[
                ('acad_org', models.CharField(db_column=b'ACAD_ORG', max_length=10, primary_key=True, serialize=False)),
                ('deptID', models.CharField(db_column=b'DEPTID', max_length=20)),
                ('deptName', models.CharField(db_column=b'DEPT_NAME', max_length=30)),
                ('acad_group', models.CharField(db_column=b'ACAD_GROUP', max_length=3)),
            ],
            options={
                'db_table': 'DEPARTMENT_VW',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CourseAttributeParent',
            fields=[
                ('crse_id', models.CharField(db_column=b'CRSE_ID', max_length=6, primary_key=True, serialize=False)),
                ('crse_offer_nbr', models.IntegerField(db_column=b'CRSE_OFFER_NBR')),
                ('strm', models.CharField(db_column=b'STRM', max_length=4)),
                ('session_code', models.CharField(db_column=b'SESSION_CODE', max_length=3)),
                ('class_section', models.CharField(db_column=b'CLASS_SECTION', max_length=4)),
                ('crse_attr', models.CharField(db_column=b'CRSE_ATTR', max_length=4)),
                ('crse_attr_value', models.CharField(db_column=b'CRSE_ATTR_VALUE', max_length=10)),
            ],
            options={
                'db_table': '"CMSCOMMON"."SFO_CLASS_ATTRIBUTE"',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CourseAttributeValueParent',
            fields=[
                ('crse_attr', models.CharField(db_column=b'CRSE_ATTR', max_length=4, primary_key=True, serialize=False)),
                ('effdt', models.DateTimeField(db_column=b'EFFDT')),
                ('crse_attr_value', models.CharField(db_column=b'CRSE_ATTR_VALUE', max_length=10)),
                ('descr', models.CharField(db_column=b'DESCR', max_length=30)),
                ('descrformal', models.CharField(db_column=b'DESCRFORMAL', max_length=50)),
            ],
            options={
                'db_table': '"CMSCOMMON"."SFO_CRSE_ATTR_VALUE"',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CourseParent',
            fields=[
                ('crse_id', models.CharField(db_column=b'CRSE_ID', max_length=6, primary_key=True, serialize=False)),
                ('effdt', models.DateField(db_column=b'EFFDT')),
                ('eff_status', models.CharField(db_column=b'EFF_STATUS', max_length=1)),
                ('course_title_long', models.CharField(db_column=b'COURSE_TITLE_LONG', max_length=100)),
                ('descrlong', models.CharField(db_column=b'DESCRLONG', max_length=4000)),
                ('component_primary', models.CharField(db_column=b'COMPONENT_PRIMARY', max_length=3)),
                ('units_acad_prog', models.SmallIntegerField(db_column=b'UNITS_ACAD_PROG')),
                ('crse_contact_hrs', models.SmallIntegerField(db_column=b'CRSE_CONTACT_HRS')),
                ('fees_exist', models.CharField(db_column=b'FEES_EXIST', max_length=1)),
                ('crse_offer_nbr', models.IntegerField()),
                ('subject', models.CharField(db_column=b'SUBJECT', max_length=8)),
                ('catalog_nbr', models.CharField(db_column=b'CATALOG_NBR', max_length=10)),
                ('acad_group', models.CharField(db_column=b'ACAD_GROUP', max_length=5)),
                ('acad_org', models.CharField(db_column=b'ACAD_ORG', max_length=10)),
                ('acad_career', models.CharField(db_column=b'ACAD_CAREER', max_length=4)),
            ],
            options={
                'db_table': 'CURRENT_COURSE_VW',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DegreeParent',
            fields=[
                ('academicPlan', models.CharField(db_column=b'ACAD_PLAN', max_length=10, primary_key=True, serialize=False)),
                ('academicOrganization', models.CharField(db_column=b'ACAD_ORG', max_length=10)),
                ('dateCreated', models.DateTimeField(blank=True, db_column=b'DATE_CREATED', null=True)),
                ('dateModified', models.DateTimeField(blank=True, db_column=b'LAST_MODIFIED', null=True)),
            ],
            options={
                'db_table': 'DEGREE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DegreeStudentParent',
            fields=[
                ('id', models.CharField(db_column=b'ID', max_length=21, primary_key=True, serialize=False)),
                ('emplid', models.CharField(db_column=b'EMPLID', max_length=11)),
                ('academicCareer', models.CharField(db_column=b'acad_career', max_length=4)),
                ('studentCareerNumber', models.IntegerField(db_column=b'STDNT_CAR_NBR')),
                ('effectiveDate', models.DateTimeField(db_column=b'EFFDT')),
                ('effectiveSequence', models.IntegerField(db_column=b'EFFSEQ')),
                ('academicPlan', models.CharField(db_column=b'ACAD_PLAN', max_length=10)),
                ('declareDate', models.DateTimeField(db_column=b'DECLARE_DT')),
                ('planSequenceNumber', models.IntegerField(db_column=b'PLAN_SEQUENCE')),
                ('reqTerm', models.CharField(db_column=b'REQ_TERM', max_length=4)),
                ('completionTerm', models.CharField(db_column=b'COMPLETION_TERM', max_length=4)),
                ('studentDegreeNumber', models.CharField(db_column=b'STDNT_DEGR', max_length=2)),
                ('degreeCheckoutStatus', models.CharField(db_column=b'DEGR_CHKOUT_STAT', max_length=2)),
            ],
            options={
                'db_table': 'DEGREE_STUDENT',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DeprecatedSectionParent',
            fields=[
                ('id', models.IntegerField(db_column=b'ID', primary_key=True, serialize=False)),
                ('strm', models.CharField(db_column=b'STRM', max_length=4)),
                ('classNumber', models.IntegerField(db_column=b'CLASS_NBR')),
                ('courseID', models.CharField(db_column=b'CRSE_ID', max_length=6)),
                ('subject', models.CharField(db_column=b'SUBJECT', max_length=8)),
                ('catalogNumber', models.CharField(db_column=b'CATALOG_NBR', max_length=10)),
                ('classSection', models.CharField(db_column=b'CLASS_SECTION', max_length=4)),
                ('courseDescription', models.CharField(db_column=b'DESCR', max_length=30)),
                ('units', models.IntegerField(db_column=b'UNITS_ACAD_PROG')),
                ('courseType', models.CharField(db_column=b'SSR_COMPONENT', max_length=3)),
                ('meetDays', models.CharField(db_column=b'MEETING_DAYS', max_length=4)),
                ('startTime', models.CharField(db_column=b'START_TIME', max_length=5)),
                ('endTime', models.CharField(db_column=b'END_TIME', max_length=5)),
                ('startDate', models.CharField(db_column=b'START_DATE', max_length=11)),
                ('endDate', models.CharField(db_column=b'END_DATE', max_length=11)),
                ('building', models.CharField(db_column=b'BLDG_CD', max_length=10)),
                ('room', models.CharField(db_column=b'ROOM', max_length=10)),
                ('enrollCap', models.IntegerField(db_column=b'ENRL_CAP')),
                ('waitCap', models.IntegerField(db_column=b'WAIT_CAP')),
                ('instructorID', models.CharField(db_column=b'EMPLID', max_length=9)),
                ('instructorFirstName', models.CharField(db_column=b'FIRST_NAME', max_length=30)),
                ('instructorLastName', models.CharField(db_column=b'LAST_NAME', max_length=30)),
                ('instructorEmail', models.CharField(db_column=b'EMAIL_ADDR', max_length=40)),
                ('enrollCount', models.IntegerField(db_column=b'ENRL_TOT')),
                ('waitCount', models.IntegerField(db_column=b'WAIT_TOT')),
                ('enrollingStatus', models.CharField(db_column=b'ENRL_STAT', max_length=1)),
                ('classStatus', models.CharField(db_column=b'CLASS_STAT', max_length=1)),
                ('classType', models.CharField(db_column=b'CLASS_TYPE', max_length=1)),
                ('associatedClass', models.IntegerField(db_column=b'ASSOCIATED_CLASS')),
                ('schedulePrint', models.CharField(db_column=b'SCHEDULE_PRINT', max_length=1)),
                ('acadOrg', models.CharField(db_column=b'ACAD_ORG', max_length=10)),
                ('acadCareer', models.CharField(db_column=b'ACAD_CAREER', max_length=4)),
                ('acadGroup', models.CharField(db_column=b'ACAD_GROUP', max_length=5)),
                ('institution', models.CharField(db_column=b'INSTITUTION', max_length=5)),
                ('campus', models.CharField(db_column=b'CAMPUS', max_length=5)),
                ('campusEventNumber', models.CharField(db_column=b'CAMPUS_EVENT_NBR', max_length=9)),
                ('combinedSection', models.CharField(db_column=b'COMBINED_SECTION', max_length=1)),
                ('sessionCode', models.CharField(db_column=b'SESSION_CODE', max_length=3)),
            ],
            options={
                'db_table': 'SECTION_VW',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EmployeeParent',
            fields=[
                ('emplid', models.CharField(db_column=b'EMPLID', max_length=11, primary_key=True, serialize=False)),
                ('firstName', models.CharField(db_column=b'FIRST_NAME', max_length=30)),
                ('lastName', models.CharField(db_column=b'LAST_NAME', max_length=30)),
                ('emailAddress', models.CharField(db_column=b'EMAIL_ADDR', max_length=30)),
                ('jobCode', models.CharField(db_column=b'JOB_CODE', max_length=128)),
                ('jobDescription', models.CharField(db_column=b'JOB_DESCRIPTION', max_length=128)),
                ('jobAbbreviation', models.CharField(db_column=b'JOB_ABBR', max_length=128)),
                ('jobFunction', models.CharField(db_column=b'JOB_FUNCTION', max_length=128)),
                ('jobTitle', models.CharField(db_column=b'JOB_TITLE', max_length=128)),
                ('jobGrade', models.CharField(db_column=b'JOB_GRADE', max_length=128)),
            ],
            options={
                'db_table': 'EMPLOYEE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FinancialDepartmentParent',
            fields=[
                ('deptid', models.CharField(db_column=b'DEPTID', max_length=20, primary_key=True, serialize=False)),
                ('dept_name', models.CharField(db_column=b'DEPT_NAME', max_length=30)),
                ('college_deptid', models.CharField(db_column=b'COLLEGE_DEPTID', max_length=20)),
                ('college_name', models.CharField(db_column=b'COLLEGE_NAME', max_length=30)),
                ('cabinet_deptid', models.CharField(db_column=b'CABINET_DEPTID', max_length=20)),
                ('cabinet_name', models.CharField(db_column=b'CABINET_NAME', max_length=30)),
                ('cfs_dept_name', models.CharField(db_column=b'CFS_DEPT_NAME', max_length=100)),
                ('acad_org', models.CharField(db_column=b'ACAD_ORG', max_length=25)),
                ('acad_group', models.CharField(db_column=b'ACAD_GROUP', max_length=25)),
            ],
            options={
                'db_table': 'DEPARTMENT_HIERARCHY_VW',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GTAParent',
            fields=[
                ('emplid', models.CharField(db_column=b'EMPLID', max_length=11, primary_key=True, serialize=False)),
                ('firstName', models.CharField(db_column=b'FIRST_NAME', max_length=30)),
                ('lastName', models.CharField(db_column=b'LAST_NAME', max_length=30)),
                ('emailAddress', models.CharField(db_column=b'EMAIL_ADDR', max_length=30)),
                ('lastRegisteredTerm', models.CharField(db_column=b'STRM', max_length=4)),
                ('cumulativeGPA', models.DecimalField(db_column=b'CUM_GPA', decimal_places=2, max_digits=4)),
            ],
            options={
                'db_table': 'GTA',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='InstructorParent',
            fields=[
                ('emplid', models.CharField(db_column=b'EMPLID', max_length=11, primary_key=True, serialize=False)),
                ('first_name', models.CharField(db_column=b'FIRST_NAME', max_length=30)),
                ('last_name', models.CharField(db_column=b'LAST_NAME', max_length=30)),
                ('emailAddress', models.CharField(db_column=b'EMAIL_ADDR', max_length=30)),
                ('job', models.CharField(db_column=b'JOB', max_length=3)),
                ('desiredLoad', models.IntegerField(db_column=b'DESIRED_LOAD')),
                ('approvedLoad', models.IntegerField(db_column=b'APPROVED_LOAD')),
            ],
            options={
                'db_table': 'INSTRUCTORS_SPRING2018',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SectionParent',
            fields=[
                ('id', models.IntegerField(db_column=b'ID', primary_key=True, serialize=False)),
                ('institution', models.CharField(db_column=b'INSTITUTION', max_length=5)),
                ('strm', models.CharField(db_column=b'STRM', max_length=4)),
                ('courseID', models.CharField(db_column=b'CRSE_ID', max_length=6)),
                ('sessionCode', models.CharField(db_column=b'SESSION_CODE', max_length=3)),
                ('courseOfferNumber', models.IntegerField(db_column=b'CRSE_OFFER_NBR')),
                ('classSection', models.CharField(db_column=b'CLASS_SECTION', max_length=4)),
                ('classNumber', models.IntegerField(db_column=b'CLASS_NBR')),
                ('acadGroup', models.CharField(db_column=b'ACAD_GROUP', max_length=5)),
                ('acadOrg', models.CharField(db_column=b'ACAD_ORG', max_length=10)),
                ('subject', models.CharField(db_column=b'SUBJECT', max_length=8)),
                ('catalogNumber', models.CharField(db_column=b'CATALOG_NBR', max_length=10)),
                ('associatedClass', models.IntegerField(db_column=b'ASSOCIATED_CLASS')),
                ('autoEnrollSect1', models.CharField(db_column=b'AUTO_ENROLL_SECT_1', max_length=4)),
                ('courseDescription', models.CharField(db_column=b'DESCR', max_length=30)),
                ('courseTopicID', models.IntegerField(db_column=b'CRS_TOPIC_ID')),
                ('classMeetingNumber', models.IntegerField(db_column=b'CLASS_MTG_NBR')),
                ('csuCOCSNumber', models.CharField(db_column=b'CSU_CO_CS_NUMBER', max_length=2)),
                ('courseComponent', models.CharField(db_column=b'SSR_COMPONENT', max_length=3)),
                ('studentCreditUnits', models.IntegerField(db_column=b'CSU_APDB_CMP_UNITS')),
                ('tbaHours', models.DecimalField(db_column=b'CSU_APDB_TBA_HOURS', decimal_places=2, max_digits=5)),
                ('learningMode', models.CharField(db_column=b'CSU_APDB_LRNG_MODE', max_length=2)),
                ('startDate', models.DateTimeField(db_column=b'START_DATE')),
                ('endDate', models.DateTimeField(db_column=b'END_DATE')),
                ('facilityID', models.CharField(db_column=b'FACILITY_ID', max_length=10)),
                ('standardMeetingPattern', models.CharField(db_column=b'STND_MTG_PAT', max_length=4)),
                ('meetingTimeStart', models.DateTimeField(db_column=b'MEETING_TIME_START')),
                ('meetingTimeEnd', models.DateTimeField(db_column=b'MEETING_TIME_END')),
                ('enrollCap', models.IntegerField(db_column=b'ENRL_CAP')),
                ('enrollTotal', models.IntegerField(db_column=b'ENRL_TOT')),
                ('waitCap', models.IntegerField(db_column=b'WAIT_CAP')),
                ('waitTotal', models.IntegerField(db_column=b'WAIT_TOT')),
                ('instructorLastName', models.CharField(db_column=b'LAST_NAME', max_length=30)),
                ('instructorFirstName', models.CharField(db_column=b'FIRST_NAME', max_length=30)),
                ('instructorID', models.CharField(db_column=b'EMPLID', max_length=9)),
                ('schedulePrint', models.CharField(db_column=b'SCHEDULE_PRINT', max_length=1)),
                ('classStatus', models.CharField(db_column=b'CLASS_STAT', max_length=1)),
                ('enrollStatus', models.CharField(db_column=b'ENRL_STAT', max_length=1)),
                ('classType', models.CharField(db_column=b'CLASS_TYPE', max_length=1)),
                ('acadCareer', models.CharField(db_column=b'ACAD_CAREER', max_length=4)),
                ('sectionCombinedID', models.CharField(db_column=b'SCTN_COMBINED_ID', max_length=4)),
                ('minimumUnits', models.IntegerField(db_column=b'UNITS_MINIMUM')),
                ('maximumUnits', models.IntegerField(db_column=b'UNITS_MAXIMUM')),
                ('instructorAssignSequence', models.IntegerField(db_column=b'INSTR_ASSIGN_SEQ')),
                ('instructorLoadFactor', models.IntegerField(db_column=b'INSTR_LOAD_FACTOR')),
                ('schedulePrintInstructor', models.CharField(db_column=b'SCHED_PRINT_INSTR', max_length=1)),
                ('instructorRole', models.CharField(db_column=b'INSTR_ROLE', max_length=4)),
                ('employeeRecord', models.IntegerField(db_column=b'EMPL_RCD')),
                ('sfoCourseTopicTL', models.CharField(db_column=b'SFO_CRSE_TPC_TL', max_length=30)),
                ('classNoteNumber', models.CharField(db_column=b'CLASS_NOTE_NBR', max_length=4)),
                ('fte', models.DecimalField(db_column=b'SFO_OSB_FTE', decimal_places=2, max_digits=5)),
                ('departmentName', models.CharField(db_column=b'SFO_DEPT_NAME', max_length=30)),
                ('jobCode', models.CharField(db_column=b'JOBCODE', max_length=6)),
                ('roomCharacteristic', models.CharField(db_column=b'ROOM_CHRSTC', max_length=2)),
                ('weekWorkloadHours', models.IntegerField(db_column=b'WEEK_WORKLOAD_HRS')),
                ('generalAssign', models.CharField(db_column=b'GENERL_ASSIGN', max_length=1)),
            ],
            options={
                'db_table': 'SFO_CS_OSB1_VW',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SectionStudentParent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sectionid', models.IntegerField(db_column=b'ID')),
                ('strm', models.CharField(db_column=b'STRM', max_length=4)),
                ('classNumber', models.IntegerField(db_column=b'CLASS_NBR')),
                ('status', models.CharField(db_column=b'STATUS', max_length=8)),
                ('enrolledStatus', models.CharField(db_column=b'ENROLLED_STATUS', max_length=8)),
                ('subject', models.CharField(db_column=b'SUBJECT', max_length=8)),
                ('catalogNumber', models.CharField(db_column=b'CATALOG_NBR', max_length=10)),
                ('sessionCode', models.CharField(db_column=b'SESSION_CODE', max_length=3)),
                ('classSection', models.CharField(db_column=b'CLASS_SECTION', max_length=4)),
                ('username', models.CharField(db_column=b'EMPLID', max_length=11)),
                ('first_name', models.CharField(db_column=b'FIRST_NAME', max_length=30)),
                ('last_name', models.CharField(db_column=b'LAST_NAME', max_length=30)),
                ('email', models.CharField(db_column=b'EMAIL_ADDR', max_length=40)),
                ('academicPlan', models.CharField(db_column=b'ACAD_PLAN', max_length=10)),
                ('academicPlanDescription', models.CharField(db_column=b'DESCR', max_length=30)),
                ('academicLevel', models.CharField(db_column=b'ACAD_LEVEL_BOT', max_length=3)),
                ('classLevel', models.CharField(db_column=b'CLASS_LEVEL', max_length=10)),
                ('permissionNumberUsed', models.CharField(db_column=b'PERMISSION_NBR_USED', max_length=1)),
                ('gradingBasisEnroll', models.CharField(db_column=b'GRADING_BASIS_ENRL', max_length=3)),
                ('officialCourseGrade', models.CharField(db_column=b'CRSE_GRADE_OFF', max_length=3)),
            ],
            options={
                'db_table': 'ENROLL_VW',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TermParent',
            fields=[
                ('strm', models.CharField(db_column=b'STRM', max_length=4, primary_key=True, serialize=False)),
                ('descr', models.CharField(db_column=b'DESCR', max_length=30)),
                ('descrshort', models.CharField(db_column=b'DESCRSHORT', max_length=10)),
                ('term_begin_dt', models.DateField(db_column=b'TERM_BEGIN_DT')),
                ('term_end_dt', models.DateField(db_column=b'TERM_END_DT')),
                ('session_code', models.CharField(db_column=b'SESSION_CODE', max_length=3)),
                ('weeks_of_instruct', models.IntegerField(db_column=b'WEEKS_OF_INSTRUCT')),
                ('term_category', models.CharField(db_column=b'TERM_CATEGORY', max_length=1)),
                ('acad_year', models.CharField(db_column=b'ACAD_YEAR', max_length=4)),
            ],
            options={
                'db_table': '"CMSCOMMON"."SFO_TERM_TBL"',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AcademicGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('nickname', models.CharField(blank=True, max_length=60, null=True)),
                ('number', models.CharField(blank=True, max_length=5, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AcademicOrganization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('nickname', models.CharField(blank=True, max_length=32, null=True)),
                ('acad_org', models.CharField(blank=True, max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ApproverList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.SmallIntegerField()),
                ('groups', models.ManyToManyField(to='auth.Group')),
            ],
        ),
        migrations.CreateModel(
            name='Cadence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('terms', models.CharField(blank=True, max_length=30)),
                ('years', models.CharField(blank=True, max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Committee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('nickname', models.CharField(blank=True, max_length=8)),
                ('description', models.CharField(blank=True, max_length=512)),
                ('size', models.SmallIntegerField()),
                ('termYears', models.SmallIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CommitteePerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voting', models.BooleanField(default=False)),
                ('termStart', models.DateField()),
                ('termEnd', models.DateField()),
                ('committee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Committee')),
            ],
        ),
        migrations.CreateModel(
            name='CommitteePersonRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.CharField(blank=True, max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=8)),
                ('description', models.CharField(blank=True, max_length=60, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=8)),
                ('courseID', models.CharField(max_length=6)),
                ('effectiveDate', models.DateTimeField()),
                ('effectiveStatus', models.CharField(max_length=1)),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=4000)),
                ('contactHours', models.SmallIntegerField()),
                ('offerNumber', models.IntegerField()),
                ('academicCareer', models.CharField(max_length=4)),
            ],
        ),
        migrations.CreateModel(
            name='CourseAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=4)),
                ('value', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='CourseComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('units', models.SmallIntegerField()),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Component')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Degree',
            fields=[
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('academicPlan', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('dateCreated', models.DateTimeField(null=True)),
                ('dateModified', models.DateTimeField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EnrollmentSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now=True)),
                ('enrollCap', models.SmallIntegerField()),
                ('enrolled', models.SmallIntegerField()),
                ('waitlistCap', models.SmallIntegerField()),
                ('waitlisted', models.SmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='FERP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startDate', models.DateField(blank=True, null=True)),
                ('endDate', models.DateField(blank=True, null=True)),
                ('FTE', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FinancialDepartment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deptID', models.CharField(max_length=20)),
                ('deptName', models.CharField(max_length=60)),
                ('college_deptid', models.CharField(max_length=20)),
                ('college_name', models.CharField(max_length=60)),
                ('cabinet_deptid', models.CharField(max_length=20)),
                ('cabinet_name', models.CharField(max_length=60)),
                ('cfs_dept_name', models.CharField(max_length=100)),
                ('acad_org', models.CharField(max_length=25)),
                ('acad_group', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='KFactor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('CSNumber', models.SmallIntegerField(blank=True, null=True)),
                ('factor', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Leave',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effectiveDate', models.DateField(blank=True, null=True)),
                ('returnDate', models.DateField(blank=True, null=True)),
                ('type', models.CharField(choices=[(b'Sabbatical', b'Sabbatical'), (b'LWDIP', b'Leave With Difference in Pay'), (b'LWOP', b'Leave Without Pay')], max_length=60)),
                ('FTE', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jobCode', models.SmallIntegerField()),
                ('department', models.CharField(max_length=64)),
                ('departmentID', models.SmallIntegerField()),
                ('grade', models.SmallIntegerField(blank=True, null=True)),
                ('fullTimeCompRate', models.FloatField(blank=True, null=True)),
                ('timeBase', models.FloatField()),
                ('monthlySalary', models.FloatField(blank=True, null=True)),
                ('positionNumber', models.CharField(blank=True, max_length=8, null=True)),
                ('firstHireDate', models.DateField(blank=True, null=True)),
                ('effectiveDate', models.DateField(blank=True, null=True)),
                ('apptEndDate', models.DateField(blank=True, null=True)),
                ('payStatus', models.CharField(blank=True, max_length=16, null=True)),
                ('actionDate', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Prerequisite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passingGrade', Academics.fields.GradeField(blank=True, choices=[(Academics.fields.Grade(b'A'), Academics.fields.Grade(b'A')), (Academics.fields.Grade(b'A-'), Academics.fields.Grade(b'A-')), (Academics.fields.Grade(b'B+'), Academics.fields.Grade(b'B+')), (Academics.fields.Grade(b'B'), Academics.fields.Grade(b'B')), (Academics.fields.Grade(b'B-'), Academics.fields.Grade(b'B-')), (Academics.fields.Grade(b'C+'), Academics.fields.Grade(b'C+')), (Academics.fields.Grade(b'C'), Academics.fields.Grade(b'C')), (Academics.fields.Grade(b'C-'), Academics.fields.Grade(b'C-')), (Academics.fields.Grade(b'D+'), Academics.fields.Grade(b'D+')), (Academics.fields.Grade(b'D'), Academics.fields.Grade(b'D')), (Academics.fields.Grade(b'D-'), Academics.fields.Grade(b'D-')), (Academics.fields.Grade(b'WU'), Academics.fields.Grade(b'WU')), (Academics.fields.Grade(b'F'), Academics.fields.Grade(b'F')), (Academics.fields.Grade(b'IC'), Academics.fields.Grade(b'IC')), (Academics.fields.Grade(b''), Academics.fields.Grade(b'')), (Academics.fields.Grade(b'WM'), Academics.fields.Grade(b'WM')), (Academics.fields.Grade(b'AUD'), Academics.fields.Grade(b'AUD')), (Academics.fields.Grade(b'RP'), Academics.fields.Grade(b'RP')), (Academics.fields.Grade(b'NC'), Academics.fields.Grade(b'NC')), (Academics.fields.Grade(b'RD'), Academics.fields.Grade(b'RD')), (Academics.fields.Grade(b'I'), Academics.fields.Grade(b'I')), (Academics.fields.Grade(b'IP'), Academics.fields.Grade(b'IP')), (Academics.fields.Grade(b'AU'), Academics.fields.Grade(b'AU')), (Academics.fields.Grade(b'W'), Academics.fields.Grade(b'W')), (Academics.fields.Grade(b'CR'), Academics.fields.Grade(b'CR')), (Academics.fields.Grade(b'Conc'), Academics.fields.Grade(b'Conc'))], max_length=4)),
                ('requiredCourse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prerequisiteCourses', to='Academics.Course')),
                ('requiredForCourse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coursesWithPrerequisites', to='Academics.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Reason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.CharField(blank=True, max_length=512)),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=4)),
                ('classNumber', models.IntegerField()),
                ('meetDays', models.CharField(blank=True, max_length=32, null=True)),
                ('startTime', models.TimeField(blank=True, null=True)),
                ('endTime', models.TimeField(blank=True, null=True)),
                ('room', models.CharField(blank=True, max_length=32, null=True)),
                ('roomCap', models.IntegerField(blank=True, null=True)),
                ('enrollCap', models.IntegerField(blank=True, null=True)),
                ('waitCap', models.IntegerField(blank=True, null=True)),
                ('enrollStatus', models.CharField(blank=True, max_length=1, null=True)),
                ('classStatus', models.CharField(blank=True, max_length=1, null=True)),
                ('classType', models.CharField(blank=True, max_length=1, null=True)),
                ('associatedClass', models.IntegerField(blank=True, null=True)),
                ('schedulePrint', models.CharField(blank=True, max_length=1, null=True)),
                ('acadOrg', models.CharField(blank=True, max_length=10, null=True)),
                ('acadCareer', models.CharField(blank=True, max_length=4, null=True)),
                ('acadGroup', models.CharField(blank=True, max_length=5, null=True)),
                ('institution', models.CharField(blank=True, max_length=5, null=True)),
                ('campus', models.CharField(blank=True, max_length=5, null=True)),
                ('campusEventNumber', models.CharField(blank=True, max_length=9, null=True)),
                ('combinedSection', models.CharField(blank=True, max_length=1, null=True)),
                ('sessionCode', models.CharField(blank=True, max_length=3, null=True)),
                ('conflicts', models.ManyToManyField(blank=True, related_name='_section_conflicts_+', to='Academics.Section')),
                ('courseComponent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Academics.CourseComponent')),
            ],
        ),
        migrations.CreateModel(
            name='SectionInstructor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fraction', models.DecimalField(decimal_places=2, default=1.0, max_digits=3)),
                ('role', models.CharField(blank=True, max_length=4, null=True)),
                ('sequence', models.IntegerField(blank=True, null=True)),
                ('wtu', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('schedulePrint', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='SectionPreference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preference', models.IntegerField(choices=[(0, b'Impossible'), (1, b'Possible'), (2, b'Preferred'), (3, b'Best')], default=0, verbose_name=b'Section Preference')),
            ],
        ),
        migrations.CreateModel(
            name='SectionStudent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[(b'ENROLLED', b'Enrolled'), (b'WAITLIST', b'Waitlisted'), (b'UNREGISTERED', b'Unregistered'), (b'DROPPED', b'Dropped')], max_length=32)),
                ('permissionNumber', models.BigIntegerField(blank=True, null=True)),
                ('entryDate', models.DateField(auto_now_add=True)),
                ('updateDate', models.DateField(auto_now=True)),
                ('passedPrerequisites', models.NullBooleanField(default=None)),
                ('passedExams', models.NullBooleanField(default=None)),
                ('qualified', models.NullBooleanField(default=None)),
                ('grade', Academics.fields.GradeField(blank=True, max_length=4)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Section')),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='SessionConflict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seats', models.IntegerField()),
                ('fromSession', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_conflicts', to='Academics.Session')),
                ('toSession', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_conflicts', to='Academics.Session')),
            ],
        ),
        migrations.CreateModel(
            name='SessionCorrelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coefficient', models.FloatField()),
                ('fromSession', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_correlations', to='Academics.Session')),
                ('toSession', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_correlations', to='Academics.Session')),
            ],
        ),
        migrations.CreateModel(
            name='StudentGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', Academics.fields.GradeField(blank=True, max_length=4)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=8, unique=True)),
                ('description', models.CharField(blank=True, max_length=60, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.CharField(choices=[(b'1', b'Winter'), (b'3', b'Spring'), (b'5', b'Summer'), (b'7', b'Fall')], max_length=20)),
                ('year', models.CharField(max_length=4)),
                ('number', models.CharField(max_length=4, unique=True)),
                ('startDate', models.DateField(blank=True, null=True)),
                ('endDate', models.DateField(blank=True, null=True)),
                ('descr', models.CharField(blank=True, max_length=30, null=True)),
                ('descrshort', models.CharField(blank=True, max_length=10, null=True)),
                ('sessionCode', models.CharField(blank=True, max_length=3, null=True)),
                ('weeksOfInstruct', models.IntegerField(blank=True, null=True)),
                ('termCategory', models.CharField(blank=True, max_length=1, null=True)),
                ('academicYear', models.CharField(blank=True, max_length=4, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TermInstructor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requestedLoad', models.IntegerField(blank=True, null=True)),
                ('approvedLoad', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='WeeklyEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(max_length=1)),
                ('startTime', models.TimeField()),
                ('endTime', models.TimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Withdrawal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approvalLevel', models.SmallIntegerField(default=0)),
                ('status', models.NullBooleanField(choices=[(True, b'APPROVED'), (None, b'WAITING'), (False, b'DENIED')], default=None)),
            ],
        ),
        migrations.CreateModel(
            name='WithdrawalPreferences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approverLists', models.ManyToManyField(related_name='withdrawal_approver_for', to='Academics.ApproverList')),
                ('denierLists', models.ManyToManyField(related_name='withdrawal_denier_for', to='Academics.ApproverList')),
            ],
        ),
        migrations.CreateModel(
            name='WithdrawalReason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.SmallIntegerField()),
                ('reason', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Reason')),
                ('withdrawalPreferences', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.WithdrawalPreferences')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'person',
                'verbose_name_plural': 'people',
            },
            managers=[
                ('objects', Academics.models.PersonManager()),
            ],
        ),
        migrations.CreateModel(
            name='College',
            fields=[
                ('academicgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Academics.AcademicGroup')),
            ],
            bases=('Academics.academicgroup',),
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('academicorganization_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Academics.AcademicOrganization')),
            ],
            bases=('Academics.academicorganization',),
        ),
        migrations.CreateModel(
            name='Lecturer',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'lecturer',
                'verbose_name_plural': 'lecturers',
            },
            bases=('Academics.person',),
            managers=[
                ('objects', Academics.models.LecturerManager()),
            ],
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('academicorganization_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Academics.AcademicOrganization')),
            ],
            bases=('Academics.academicorganization',),
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('academicorganization_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Academics.AcademicOrganization')),
            ],
            bases=('Academics.academicorganization',),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('level', models.CharField(choices=[(b'Freshman', b'Freshman'), (b'Sophomore', b'Sophomore'), (b'Junior', b'Junior'), (b'Senior', b'Senior'), (b'Post-Bacc', b'Post-Bacc'), (b'Graduate', b'Graduate')], max_length=16)),
            ],
            options={
                'verbose_name': 'student',
                'verbose_name_plural': 'students',
            },
            bases=('Academics.person',),
            managers=[
                ('objects', Academics.models.StudentManager()),
            ],
        ),
        migrations.AddField(
            model_name='person',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='person',
            name='preferences',
            field=models.ManyToManyField(blank=True, related_name='requested_by', through='Academics.SectionPreference', to='Academics.Section'),
        ),
        migrations.AddField(
            model_name='person',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='withdrawalpreferences',
            name='reasons',
            field=models.ManyToManyField(through='Academics.WithdrawalReason', to='Academics.Reason'),
        ),
        migrations.AddField(
            model_name='withdrawal',
            name='approvedBy',
            field=models.ManyToManyField(blank=True, related_name='approved_withdrawals', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='withdrawal',
            name='deniedBy',
            field=models.ManyToManyField(blank=True, related_name='denied_withdrawals', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='withdrawal',
            name='sectionStudent',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Academics.SectionStudent'),
        ),
        migrations.AlterUniqueTogether(
            name='weeklyevent',
            unique_together=set([('day', 'startTime', 'endTime')]),
        ),
        migrations.AddField(
            model_name='terminstructor',
            name='instructor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='terminstructor',
            name='term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Term'),
        ),
        migrations.AddField(
            model_name='term',
            name='instructors',
            field=models.ManyToManyField(blank=True, through='Academics.TermInstructor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='subject',
            name='host',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Academics.AcademicOrganization'),
        ),
        migrations.AddField(
            model_name='session',
            name='conflicts',
            field=models.ManyToManyField(related_name='conflicts_with', through='Academics.SessionConflict', to='Academics.Session'),
        ),
        migrations.AddField(
            model_name='session',
            name='coordinator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='session',
            name='correlations',
            field=models.ManyToManyField(related_name='correlated_with', through='Academics.SessionCorrelation', to='Academics.Session'),
        ),
        migrations.AddField(
            model_name='session',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Course'),
        ),
        migrations.AddField(
            model_name='session',
            name='term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Term'),
        ),
        migrations.AddField(
            model_name='sectionpreference',
            name='instructor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='sectionpreference',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Section'),
        ),
        migrations.AddField(
            model_name='sectioninstructor',
            name='instructor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='sectioninstructor',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Section'),
        ),
        migrations.AddField(
            model_name='section',
            name='instructors',
            field=models.ManyToManyField(blank=True, related_name='sections_as_instructor', through='Academics.SectionInstructor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='section',
            name='kFactor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Academics.KFactor'),
        ),
        migrations.AddField(
            model_name='section',
            name='meetings',
            field=models.ManyToManyField(blank=True, to='Academics.WeeklyEvent'),
        ),
        migrations.AddField(
            model_name='section',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Session'),
        ),
        migrations.AddField(
            model_name='position',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='leave',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ferp',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='enrollmentsnapshot',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Section'),
        ),
        migrations.AddField(
            model_name='degree',
            name='academicOrganization',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Academics.AcademicOrganization'),
        ),
        migrations.AddField(
            model_name='course',
            name='academicGroup',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Academics.AcademicGroup'),
        ),
        migrations.AddField(
            model_name='course',
            name='academicOrganization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Academics.AcademicOrganization'),
        ),
        migrations.AddField(
            model_name='course',
            name='attributes',
            field=models.ManyToManyField(blank=True, to='Academics.CourseAttribute'),
        ),
        migrations.AddField(
            model_name='course',
            name='cadence',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Academics.Cadence'),
        ),
        migrations.AddField(
            model_name='course',
            name='components',
            field=models.ManyToManyField(blank=True, through='Academics.CourseComponent', to='Academics.Component'),
        ),
        migrations.AddField(
            model_name='course',
            name='corequisites',
            field=models.ManyToManyField(blank=True, related_name='corequisites_to', to='Academics.Course'),
        ),
        migrations.AddField(
            model_name='course',
            name='prerequisites',
            field=models.ManyToManyField(blank=True, related_name='prerequisites_to', through='Academics.Prerequisite', to='Academics.Course'),
        ),
        migrations.AddField(
            model_name='course',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Subject'),
        ),
        migrations.AddField(
            model_name='committeeperson',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='committeeperson',
            name='role',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='Academics.CommitteePersonRole'),
        ),
        migrations.AddField(
            model_name='committee',
            name='acadGroup',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Academics.AcademicGroup'),
        ),
        migrations.AddField(
            model_name='committee',
            name='acadOrg',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Academics.AcademicOrganization'),
        ),
        migrations.AddField(
            model_name='committee',
            name='members',
            field=models.ManyToManyField(blank=True, through='Academics.CommitteePerson', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicorganization',
            name='academicGroup',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Academics.AcademicGroup'),
        ),
        migrations.AddField(
            model_name='academicorganization',
            name='financialDepartment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Academics.FinancialDepartment'),
        ),
        migrations.AddField(
            model_name='academicgroup',
            name='financialDepartment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Academics.FinancialDepartment'),
        ),
        migrations.CreateModel(
            name='GTA',
            fields=[
                ('student_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Academics.Student')),
                ('gpa', models.DecimalField(decimal_places=2, max_digits=4, null=True)),
            ],
            options={
                'verbose_name': 'GTA',
                'verbose_name_plural': 'GTAs',
            },
            bases=('Academics.student',),
            managers=[
                ('objects', Academics.models.GTAManager()),
            ],
        ),
        migrations.AddField(
            model_name='withdrawalpreferences',
            name='college',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Academics.College'),
        ),
        migrations.AddField(
            model_name='studentgrade',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Student'),
        ),
        migrations.AlterUniqueTogether(
            name='session',
            unique_together=set([('course', 'term')]),
        ),
        migrations.AddField(
            model_name='sectionstudent',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.Student'),
        ),
        migrations.AlterUniqueTogether(
            name='sectionpreference',
            unique_together=set([('section', 'instructor')]),
        ),
        migrations.AddField(
            model_name='section',
            name='students',
            field=models.ManyToManyField(blank=True, through='Academics.SectionStudent', to='Academics.Student'),
        ),
        migrations.AddField(
            model_name='school',
            name='aoc',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='schools_is_aoc', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='school',
            name='college',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.College'),
        ),
        migrations.AddField(
            model_name='school',
            name='director',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='schools_is_director', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='program',
            name='aoc',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='programs_is_aoc', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='program',
            name='college',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.College'),
        ),
        migrations.AddField(
            model_name='program',
            name='director',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='programs_is_director', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lecturer',
            name='courses',
            field=models.ManyToManyField(to='Academics.Course'),
        ),
        migrations.AddField(
            model_name='lecturer',
            name='subjects',
            field=models.ManyToManyField(to='Academics.Subject'),
        ),
        migrations.AddField(
            model_name='department',
            name='aoc',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='departments_is_aoc', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='department',
            name='chair',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='departments_is_chair', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='department',
            name='college',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Academics.College'),
        ),
        migrations.AddField(
            model_name='course',
            name='studentGrades',
            field=models.ManyToManyField(blank=True, related_name='courseGrades', through='Academics.StudentGrade', to='Academics.Student'),
        ),
        migrations.AlterUniqueTogether(
            name='committee',
            unique_together=set([('acadOrg', 'acadGroup', 'name')]),
        ),
        migrations.AddField(
            model_name='college',
            name='dean',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='colleges_is_dean', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='section',
            unique_together=set([('session', 'number', 'classStatus')]),
        ),
        migrations.AlterUniqueTogether(
            name='course',
            unique_together=set([('subject', 'number', 'courseID')]),
        ),
    ]
